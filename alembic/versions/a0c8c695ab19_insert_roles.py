"""insert Roles

Revision ID: a0c8c695ab19
Revises: 747d59121c3a
Create Date: 2024-12-17 11:24:46.462773

"""
from typing import Sequence,Union
from alembic import op
from sqlmodel import Session
import sqlalchemy as sa
from datetime import datetime
from app.models.rol import Rol
from app.models.user import User
from app.models.user_rol import User_rol
from app.controllers.userController import get_password_hash
from passlib.context import CryptContext
import sqlalchemy as sa
import os
from dotenv import load_dotenv

load_dotenv()
email_admin = os.getenv("Super_admin_email")
psw_admin = os.getenv("Super_admin_psw")
# revision identifiers, used by Alembic.
revision: str = 'a0c8c695ab19'
down_revision: Union[str, None] = '0eb86f2bb935'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


super_admin_rol = Rol(rol="Super_admin")
admin_rol = Rol(rol="Admin")
team_gestor_rol = Rol(rol="Team_gestor")
basic_user_rol = Rol(rol="Basic_user")
def upgrade():
    # Obtener conexión
    bind = op.get_bind()
    session = Session(bind=bind)

    try:
        # Verificar si ya existen roles
        if not session.exec(sa.select(Rol).where(Rol.rol == super_admin_rol.rol)).first():
            # Crear roles
            session.add_all([super_admin_rol, admin_rol, team_gestor_rol, basic_user_rol])
            session.commit()
            # Crear usuario super admin
            hashed_pwd = get_password_hash(psw_admin)
            admin_user = User(
                email=email_admin,
                password=hashed_pwd,
                is_active=True
            )
            session.add(admin_user)
            session.commit()

            # Asignar rol
            user_rol = User_rol(
                user_id=admin_user.id,
                rol_id=super_admin_rol.id
            )
            session.add(user_rol)
            session.commit()

    except Exception as e:
        session.rollback()
        raise e
    finally:
        session.close()

    # ### commands auto generated by Alembic - please adjust! ###
    
    # connection = op.get_bind()
    # empty_database = connection.execute(sa.text("SELECT count(*) FROM information_schema.tables WHERE table_schema = 'public'")).scalar() == 0
    
    # if empty_database:
    #     # Crear roles predeterminados si la base de datos está vacía
    #     default_roles = [
    #         "Admin",
    #         "SuperAdmin",
    #         "User"
    #     ]

        
    #     for role_data in default_roles:
    #         new_role = Rol(name=role_data)
    #         op.
    #         op.bulk_insert(op.get_bind(), new_role, [
    #             {"name": role_data["name"]}
    #         ])
    # # # ### end Alembic commands ###


def downgrade():
    bind = op.get_bind()
    session = Session(bind=bind)

    try:
        # Eliminar en orden inverso
        session.exec(sa.delete(User_rol))
        session.exec(sa.delete(User).where(User.email == email_admin))
        session.exec(sa.delete(Rol).where(Rol.rol.in_([super_admin_rol,team_gestor_rol, admin_rol, basic_user_rol])))
        session.commit()
    except Exception as e:
        session.rollback()
        raise e
    finally:
        session.close()